# Getting started

[Getting started \- Polars \- User Guide](https://pola-rs.github.io/polars-book/user-guide/quickstart/intro.html)

### Installation
```console
$ pip install polars
```


### Quick start



```{python}
import polars as pl

df = pl.read_csv("https://j.mp/iriscsv")
df.head() # html format
```


```{python}
print(df.head()) # print format
```


```{python}
(df.filter(pl.col("sepal_length") > 5)
    .groupby("species", maintain_order=True)
    .agg(pl.all().sum()))
```

### Lazy quick start


```{python}
# 実行されない
(pl.read_csv("https://j.mp/iriscsv")
    .lazy()
    .filter(pl.col("sepal_length") > 5)
    .groupby("species", maintain_order=True)
    .agg(pl.all().sum())
)
```

```{python}
# .collect()で実行される
(pl.read_csv("https://j.mp/iriscsv")
    .lazy()
    .filter(pl.col("sepal_length") > 5)
    .groupby("species", maintain_order=True)
    .agg(pl.all().sum())
    .collect()
)
```

## Polars quick exploration guide

[Polars quick exploration guide \- Polars \- User Guide](https://pola-rs.github.io/polars-book/user-guide/quickstart/quick-exploration-guide.html)

### Installation and Import

```console
pip install -U polars
```

```{python}
import polars as pl
from datetime import datetime, timedelta
import numpy as np
```

### Object creation

#### From scratch

`Series`

```{python}
series = pl.Series(
    "a", [1, 2, 3, 4, 5]
)
series
```

```{python}
series = pl.Series(
    [1, 2, 3, 4, 5]
)
series
```

```{python}
type(series)
```

```{python}
isinstance(series, pl.Series)
```


`Dataframe`


```{python}
dataframe = pl.DataFrame({
    "integer": [1, 2, 3],
    "date":[
        (datetime(2022, 1, 1)),
        (datetime(2022, 1, 2)),
        (datetime(2022, 1, 3)),
    ],
    "float": [4.0, 5.0, 6.0],
})
dataframe
```


```{python}
type(dataframe)
```


```{python}
isinstance(dataframe, pl.DataFrame)
```

#### From file

##### csv

```{python}
dataframe.write_csv("output.csv")
```


```{python}
df_csv = pl.read_csv("output.csv")
df_csv
```

paarse dates


```{python}
df_csv_with_dates = pl.read_csv("output.csv", parse_dates=True)
df_csv_with_dates
```

### Viewing data

We first create a `DataFrame` to work with.


```{python}
df = pl.DataFrame({
    "a": np.arange(0, 8),
    "b": np.random.rand(8),
    "c": [
        datetime(2022, 12, 1) + timedelta(days=idx)
        for idx in range(8)
    ],
    "d": [1, 2.0, np.nan, np.nan, 0, -5, -42, None],
})
df
```

`head`


```{python}
df.head()
```

`tail`


```{python}
df.tail()
```

`sample`


```{python}
df.sample(n=3)
```

`describe`

```{python}
df.describe()
```

### Expressions

#### Select statement

select all columns

```{python}
df.select(
    pl.col("*")
)
```


```{python}
print(pl.col("*"))
print(type(pl.col("*")))
```

select specific columns


```{python}
df.select(
    pl.col(["a", "b"])
)
```


```{python}
df.select([
    pl.col("a"),
    pl.col("b")
])
```

What if column names are duplicated?

It raises exception.
```{python}
try:
    df.select(
        pl.col(["a", "a"])
    )
except Exception as e:
    print(e)
```

exclude columns


```{python}
df.select([
    pl.exclude("a")
])
```

#### Filter


```{python}
df.filter(
    pl.col("c")
    .is_between(
        datetime(2022, 12, 2), datetime(2022, 12, 8),
        closed = "none",
    ),
)
```


```{python}
df.filter(
    (pl.col("a") <= 3) &
    (pl.col("d").is_not_nan())
)
```

#### With_columns


```{python}
df.with_columns([
    pl.col("b").sum().alias("e"),
    (pl.col("b") + 42).alias("b+42"),
])
```

#### Groupby



```{python}
df2 = pl.DataFrame({
    "x": np.arange(0, 8),
    "y": ["A", "A", "A", "B", "B", "C", "X", "X"],
})
df2
```


```{python}
df2.groupby(
    "y", maintain_order=True
).count()
```

What if `maintain_order=False`

```{python}
df2.groupby(
    "y", maintain_order=False
).count()
```


```{python}
df2.groupby("y", maintain_order=True).agg([
    pl.col("*").count().alias("count"),
    pl.col("*").sum().alias("sum"),
])
```

#### Combining operations


```{python}
df_x = df.with_column(
    (pl.col("a") * pl.col("b")).alias("a * b")
).select([
    pl.all().exclude(["c", "d"])
])
df_x
```

### Combining dataframes

#### Join


```{python}
df = pl.DataFrame({"a": np.arange(0, 8), 
                   "b": np.random.rand(8), 
                   "c": [datetime(2022, 12, 1) + timedelta(days=idx) for idx in range(8)],
                   "d": [1, 2.0, np.NaN, np.NaN, 0, -5, -42, None]
                  })

df2 = pl.DataFrame({
                    "x": np.arange(0, 8), 
                    "y": ['A', 'A', 'A', 'B', 'B', 'C', 'X', 'X'],
})
```



```{python}
df.join(
    df2, left_on="a", right_on="x",
)
```

#### Concat


```{python}
pl.concat([df, df2], how="horizontal")
```

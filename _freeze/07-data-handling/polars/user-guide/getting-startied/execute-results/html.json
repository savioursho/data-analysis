{
  "hash": "5038bd87b40a5bc5b0c9b3ebeede1896",
  "result": {
    "markdown": "# Getting started\n\n[Getting started \\- Polars \\- User Guide](https://pola-rs.github.io/polars-book/user-guide/quickstart/intro.html)\n\n### Installation\n```console\n$ pip install polars\n```\n\n\n### Quick start\n\n::: {.cell execution_count=2}\n``` {.python .cell-code}\nimport polars as pl\n\ndf = pl.read_csv(\"https://j.mp/iriscsv\")\ndf.head() # html format\n```\n\n::: {.cell-output .cell-output-display execution_count=1}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n\n    .dataframe td {\n        white-space: pre;\n    }\n\n    .dataframe td {\n        padding-top: 0;\n    }\n\n    .dataframe td {\n        padding-bottom: 0;\n    }\n\n    .dataframe td {\n        line-height: 95%;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n<small>shape: (5, 5)</small>\n<thead>\n<tr>\n<th>\nsepal_length\n</th>\n<th>\nsepal_width\n</th>\n<th>\npetal_length\n</th>\n<th>\npetal_width\n</th>\n<th>\nspecies\n</th>\n</tr>\n<tr>\n<td>\nf64\n</td>\n<td>\nf64\n</td>\n<td>\nf64\n</td>\n<td>\nf64\n</td>\n<td>\nstr\n</td>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>\n5.1\n</td>\n<td>\n3.5\n</td>\n<td>\n1.4\n</td>\n<td>\n0.2\n</td>\n<td>\n&quot;setosa&quot;\n</td>\n</tr>\n<tr>\n<td>\n4.9\n</td>\n<td>\n3.0\n</td>\n<td>\n1.4\n</td>\n<td>\n0.2\n</td>\n<td>\n&quot;setosa&quot;\n</td>\n</tr>\n<tr>\n<td>\n4.7\n</td>\n<td>\n3.2\n</td>\n<td>\n1.3\n</td>\n<td>\n0.2\n</td>\n<td>\n&quot;setosa&quot;\n</td>\n</tr>\n<tr>\n<td>\n4.6\n</td>\n<td>\n3.1\n</td>\n<td>\n1.5\n</td>\n<td>\n0.2\n</td>\n<td>\n&quot;setosa&quot;\n</td>\n</tr>\n<tr>\n<td>\n5.0\n</td>\n<td>\n3.6\n</td>\n<td>\n1.4\n</td>\n<td>\n0.2\n</td>\n<td>\n&quot;setosa&quot;\n</td>\n</tr>\n</tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n::: {.cell execution_count=3}\n``` {.python .cell-code}\nprint(df.head()) # print format\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nshape: (5, 5)\n┌──────────────┬─────────────┬──────────────┬─────────────┬─────────┐\n│ sepal_length ┆ sepal_width ┆ petal_length ┆ petal_width ┆ species │\n│ ---          ┆ ---         ┆ ---          ┆ ---         ┆ ---     │\n│ f64          ┆ f64         ┆ f64          ┆ f64         ┆ str     │\n╞══════════════╪═════════════╪══════════════╪═════════════╪═════════╡\n│ 5.1          ┆ 3.5         ┆ 1.4          ┆ 0.2         ┆ setosa  │\n│ 4.9          ┆ 3.0         ┆ 1.4          ┆ 0.2         ┆ setosa  │\n│ 4.7          ┆ 3.2         ┆ 1.3          ┆ 0.2         ┆ setosa  │\n│ 4.6          ┆ 3.1         ┆ 1.5          ┆ 0.2         ┆ setosa  │\n│ 5.0          ┆ 3.6         ┆ 1.4          ┆ 0.2         ┆ setosa  │\n└──────────────┴─────────────┴──────────────┴─────────────┴─────────┘\n```\n:::\n:::\n\n\n::: {.cell execution_count=4}\n``` {.python .cell-code}\n(df.filter(pl.col(\"sepal_length\") > 5)\n    .groupby(\"species\", maintain_order=True)\n    .agg(pl.all().sum()))\n```\n\n::: {.cell-output .cell-output-display execution_count=3}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n\n    .dataframe td {\n        white-space: pre;\n    }\n\n    .dataframe td {\n        padding-top: 0;\n    }\n\n    .dataframe td {\n        padding-bottom: 0;\n    }\n\n    .dataframe td {\n        line-height: 95%;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n<small>shape: (3, 5)</small>\n<thead>\n<tr>\n<th>\nspecies\n</th>\n<th>\nsepal_length\n</th>\n<th>\nsepal_width\n</th>\n<th>\npetal_length\n</th>\n<th>\npetal_width\n</th>\n</tr>\n<tr>\n<td>\nstr\n</td>\n<td>\nf64\n</td>\n<td>\nf64\n</td>\n<td>\nf64\n</td>\n<td>\nf64\n</td>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>\n&quot;setosa&quot;\n</td>\n<td>\n116.9\n</td>\n<td>\n81.7\n</td>\n<td>\n33.2\n</td>\n<td>\n6.1\n</td>\n</tr>\n<tr>\n<td>\n&quot;versicolor&quot;\n</td>\n<td>\n281.9\n</td>\n<td>\n131.8\n</td>\n<td>\n202.9\n</td>\n<td>\n63.3\n</td>\n</tr>\n<tr>\n<td>\n&quot;virginica&quot;\n</td>\n<td>\n324.5\n</td>\n<td>\n146.2\n</td>\n<td>\n273.1\n</td>\n<td>\n99.6\n</td>\n</tr>\n</tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n### Lazy quick start\n\n::: {.cell execution_count=5}\n``` {.python .cell-code}\n# 実行されない\n(pl.read_csv(\"https://j.mp/iriscsv\")\n    .lazy()\n    .filter(pl.col(\"sepal_length\") > 5)\n    .groupby(\"species\", maintain_order=True)\n    .agg(pl.all().sum())\n)\n```\n\n::: {.cell-output .cell-output-display execution_count=4}\n```{=html}\n<i>naive plan: (run <b>LazyFrame.describe_optimized_plan()</b> to see the optimized plan)</i>\n    <p></p>\n    <div>  Aggregate<p></p>  \t[col(\"sepal_length\").sum(), col(\"sepal_width\").sum(), col(\"petal_length\").sum(), col(\"petal_width\").sum()] BY [col(\"species\")] FROM<p></p>  \t  FILTER [(col(\"sepal_length\")) > (5i32)] FROM<p></p>    DF [\"sepal_length\", \"sepal_width\", \"petal_length\", \"petal_width\"]; PROJECT */5 COLUMNS; SELECTION: \"None\"<p></p><p></p></div>\n```\n:::\n:::\n\n\n::: {.cell execution_count=6}\n``` {.python .cell-code}\n# .collect()で実行される\n(pl.read_csv(\"https://j.mp/iriscsv\")\n    .lazy()\n    .filter(pl.col(\"sepal_length\") > 5)\n    .groupby(\"species\", maintain_order=True)\n    .agg(pl.all().sum())\n    .collect()\n)\n```\n\n::: {.cell-output .cell-output-display execution_count=5}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n\n    .dataframe td {\n        white-space: pre;\n    }\n\n    .dataframe td {\n        padding-top: 0;\n    }\n\n    .dataframe td {\n        padding-bottom: 0;\n    }\n\n    .dataframe td {\n        line-height: 95%;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n<small>shape: (3, 5)</small>\n<thead>\n<tr>\n<th>\nspecies\n</th>\n<th>\nsepal_length\n</th>\n<th>\nsepal_width\n</th>\n<th>\npetal_length\n</th>\n<th>\npetal_width\n</th>\n</tr>\n<tr>\n<td>\nstr\n</td>\n<td>\nf64\n</td>\n<td>\nf64\n</td>\n<td>\nf64\n</td>\n<td>\nf64\n</td>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>\n&quot;setosa&quot;\n</td>\n<td>\n116.9\n</td>\n<td>\n81.7\n</td>\n<td>\n33.2\n</td>\n<td>\n6.1\n</td>\n</tr>\n<tr>\n<td>\n&quot;versicolor&quot;\n</td>\n<td>\n281.9\n</td>\n<td>\n131.8\n</td>\n<td>\n202.9\n</td>\n<td>\n63.3\n</td>\n</tr>\n<tr>\n<td>\n&quot;virginica&quot;\n</td>\n<td>\n324.5\n</td>\n<td>\n146.2\n</td>\n<td>\n273.1\n</td>\n<td>\n99.6\n</td>\n</tr>\n</tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n## Polars quick exploration guide\n\n[Polars quick exploration guide \\- Polars \\- User Guide](https://pola-rs.github.io/polars-book/user-guide/quickstart/quick-exploration-guide.html)\n\n### Installation and Import\n\n```console\npip install -U polars\n```\n\n::: {.cell execution_count=7}\n``` {.python .cell-code}\nimport polars as pl\nfrom datetime import datetime, timedelta\nimport numpy as np\n```\n:::\n\n\n### Object creation\n\n#### From scratch\n\n`Series`\n\n::: {.cell execution_count=8}\n``` {.python .cell-code}\nseries = pl.Series(\n    \"a\", [1, 2, 3, 4, 5]\n)\nseries\n```\n\n::: {.cell-output .cell-output-display execution_count=7}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n\n    .dataframe td {\n        white-space: pre;\n    }\n\n    .dataframe td {\n        padding-top: 0;\n    }\n\n    .dataframe td {\n        padding-bottom: 0;\n    }\n\n    .dataframe td {\n        line-height: 95%;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n<small>shape: (5,)</small>\n<thead>\n<tr>\n<th>\na\n</th>\n</tr>\n<tr>\n<td>\ni64\n</td>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>\n1\n</td>\n</tr>\n<tr>\n<td>\n2\n</td>\n</tr>\n<tr>\n<td>\n3\n</td>\n</tr>\n<tr>\n<td>\n4\n</td>\n</tr>\n<tr>\n<td>\n5\n</td>\n</tr>\n</tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n::: {.cell execution_count=9}\n``` {.python .cell-code}\nseries = pl.Series(\n    [1, 2, 3, 4, 5]\n)\nseries\n```\n\n::: {.cell-output .cell-output-display execution_count=8}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n\n    .dataframe td {\n        white-space: pre;\n    }\n\n    .dataframe td {\n        padding-top: 0;\n    }\n\n    .dataframe td {\n        padding-bottom: 0;\n    }\n\n    .dataframe td {\n        line-height: 95%;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n<small>shape: (5,)</small>\n<thead>\n<tr>\n<th>\n\n</th>\n</tr>\n<tr>\n<td>\ni64\n</td>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>\n1\n</td>\n</tr>\n<tr>\n<td>\n2\n</td>\n</tr>\n<tr>\n<td>\n3\n</td>\n</tr>\n<tr>\n<td>\n4\n</td>\n</tr>\n<tr>\n<td>\n5\n</td>\n</tr>\n</tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n::: {.cell execution_count=10}\n``` {.python .cell-code}\ntype(series)\n```\n\n::: {.cell-output .cell-output-display execution_count=9}\n```\npolars.internals.series.series.Series\n```\n:::\n:::\n\n\n::: {.cell execution_count=11}\n``` {.python .cell-code}\nisinstance(series, pl.Series)\n```\n\n::: {.cell-output .cell-output-display execution_count=10}\n```\nTrue\n```\n:::\n:::\n\n\n`Dataframe`\n\n::: {.cell execution_count=12}\n``` {.python .cell-code}\ndataframe = pl.DataFrame({\n    \"integer\": [1, 2, 3],\n    \"date\":[\n        (datetime(2022, 1, 1)),\n        (datetime(2022, 1, 2)),\n        (datetime(2022, 1, 3)),\n    ],\n    \"float\": [4.0, 5.0, 6.0],\n})\ndataframe\n```\n\n::: {.cell-output .cell-output-display execution_count=11}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n\n    .dataframe td {\n        white-space: pre;\n    }\n\n    .dataframe td {\n        padding-top: 0;\n    }\n\n    .dataframe td {\n        padding-bottom: 0;\n    }\n\n    .dataframe td {\n        line-height: 95%;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n<small>shape: (3, 3)</small>\n<thead>\n<tr>\n<th>\ninteger\n</th>\n<th>\ndate\n</th>\n<th>\nfloat\n</th>\n</tr>\n<tr>\n<td>\ni64\n</td>\n<td>\ndatetime[μs]\n</td>\n<td>\nf64\n</td>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>\n1\n</td>\n<td>\n2022-01-01 00:00:00\n</td>\n<td>\n4.0\n</td>\n</tr>\n<tr>\n<td>\n2\n</td>\n<td>\n2022-01-02 00:00:00\n</td>\n<td>\n5.0\n</td>\n</tr>\n<tr>\n<td>\n3\n</td>\n<td>\n2022-01-03 00:00:00\n</td>\n<td>\n6.0\n</td>\n</tr>\n</tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n::: {.cell execution_count=13}\n``` {.python .cell-code}\ntype(dataframe)\n```\n\n::: {.cell-output .cell-output-display execution_count=12}\n```\npolars.internals.dataframe.frame.DataFrame\n```\n:::\n:::\n\n\n::: {.cell execution_count=14}\n``` {.python .cell-code}\nisinstance(dataframe, pl.DataFrame)\n```\n\n::: {.cell-output .cell-output-display execution_count=13}\n```\nTrue\n```\n:::\n:::\n\n\n#### From file\n\n##### csv\n\n::: {.cell execution_count=15}\n``` {.python .cell-code}\ndataframe.write_csv(\"output.csv\")\n```\n:::\n\n\n::: {.cell execution_count=16}\n``` {.python .cell-code}\ndf_csv = pl.read_csv(\"output.csv\")\ndf_csv\n```\n\n::: {.cell-output .cell-output-display execution_count=15}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n\n    .dataframe td {\n        white-space: pre;\n    }\n\n    .dataframe td {\n        padding-top: 0;\n    }\n\n    .dataframe td {\n        padding-bottom: 0;\n    }\n\n    .dataframe td {\n        line-height: 95%;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n<small>shape: (3, 3)</small>\n<thead>\n<tr>\n<th>\ninteger\n</th>\n<th>\ndate\n</th>\n<th>\nfloat\n</th>\n</tr>\n<tr>\n<td>\ni64\n</td>\n<td>\nstr\n</td>\n<td>\nf64\n</td>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>\n1\n</td>\n<td>\n&quot;2022-01-01T00:...\n</td>\n<td>\n4.0\n</td>\n</tr>\n<tr>\n<td>\n2\n</td>\n<td>\n&quot;2022-01-02T00:...\n</td>\n<td>\n5.0\n</td>\n</tr>\n<tr>\n<td>\n3\n</td>\n<td>\n&quot;2022-01-03T00:...\n</td>\n<td>\n6.0\n</td>\n</tr>\n</tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\npaarse dates\n\n::: {.cell execution_count=17}\n``` {.python .cell-code}\ndf_csv_with_dates = pl.read_csv(\"output.csv\", parse_dates=True)\ndf_csv_with_dates\n```\n\n::: {.cell-output .cell-output-display execution_count=16}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n\n    .dataframe td {\n        white-space: pre;\n    }\n\n    .dataframe td {\n        padding-top: 0;\n    }\n\n    .dataframe td {\n        padding-bottom: 0;\n    }\n\n    .dataframe td {\n        line-height: 95%;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n<small>shape: (3, 3)</small>\n<thead>\n<tr>\n<th>\ninteger\n</th>\n<th>\ndate\n</th>\n<th>\nfloat\n</th>\n</tr>\n<tr>\n<td>\ni64\n</td>\n<td>\ndatetime[μs]\n</td>\n<td>\nf64\n</td>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>\n1\n</td>\n<td>\n2022-01-01 00:00:00\n</td>\n<td>\n4.0\n</td>\n</tr>\n<tr>\n<td>\n2\n</td>\n<td>\n2022-01-02 00:00:00\n</td>\n<td>\n5.0\n</td>\n</tr>\n<tr>\n<td>\n3\n</td>\n<td>\n2022-01-03 00:00:00\n</td>\n<td>\n6.0\n</td>\n</tr>\n</tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n### Viewing data\n\nWe first create a `DataFrame` to work with.\n\n::: {.cell execution_count=18}\n``` {.python .cell-code}\ndf = pl.DataFrame({\n    \"a\": np.arange(0, 8),\n    \"b\": np.random.rand(8),\n    \"c\": [\n        datetime(2022, 12, 1) + timedelta(days=idx)\n        for idx in range(8)\n    ],\n    \"d\": [1, 2.0, np.nan, np.nan, 0, -5, -42, None],\n})\ndf\n```\n\n::: {.cell-output .cell-output-display execution_count=17}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n\n    .dataframe td {\n        white-space: pre;\n    }\n\n    .dataframe td {\n        padding-top: 0;\n    }\n\n    .dataframe td {\n        padding-bottom: 0;\n    }\n\n    .dataframe td {\n        line-height: 95%;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n<small>shape: (8, 4)</small>\n<thead>\n<tr>\n<th>\na\n</th>\n<th>\nb\n</th>\n<th>\nc\n</th>\n<th>\nd\n</th>\n</tr>\n<tr>\n<td>\ni64\n</td>\n<td>\nf64\n</td>\n<td>\ndatetime[μs]\n</td>\n<td>\nf64\n</td>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>\n0\n</td>\n<td>\n0.945679\n</td>\n<td>\n2022-12-01 00:00:00\n</td>\n<td>\n1.0\n</td>\n</tr>\n<tr>\n<td>\n1\n</td>\n<td>\n0.232926\n</td>\n<td>\n2022-12-02 00:00:00\n</td>\n<td>\n2.0\n</td>\n</tr>\n<tr>\n<td>\n2\n</td>\n<td>\n0.638681\n</td>\n<td>\n2022-12-03 00:00:00\n</td>\n<td>\nNaN\n</td>\n</tr>\n<tr>\n<td>\n3\n</td>\n<td>\n0.295667\n</td>\n<td>\n2022-12-04 00:00:00\n</td>\n<td>\nNaN\n</td>\n</tr>\n<tr>\n<td>\n4\n</td>\n<td>\n0.296556\n</td>\n<td>\n2022-12-05 00:00:00\n</td>\n<td>\n0.0\n</td>\n</tr>\n<tr>\n<td>\n5\n</td>\n<td>\n0.142492\n</td>\n<td>\n2022-12-06 00:00:00\n</td>\n<td>\n-5.0\n</td>\n</tr>\n<tr>\n<td>\n6\n</td>\n<td>\n0.351933\n</td>\n<td>\n2022-12-07 00:00:00\n</td>\n<td>\n-42.0\n</td>\n</tr>\n<tr>\n<td>\n7\n</td>\n<td>\n0.486924\n</td>\n<td>\n2022-12-08 00:00:00\n</td>\n<td>\nnull\n</td>\n</tr>\n</tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n`head`\n\n::: {.cell execution_count=19}\n``` {.python .cell-code}\ndf.head()\n```\n\n::: {.cell-output .cell-output-display execution_count=18}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n\n    .dataframe td {\n        white-space: pre;\n    }\n\n    .dataframe td {\n        padding-top: 0;\n    }\n\n    .dataframe td {\n        padding-bottom: 0;\n    }\n\n    .dataframe td {\n        line-height: 95%;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n<small>shape: (5, 4)</small>\n<thead>\n<tr>\n<th>\na\n</th>\n<th>\nb\n</th>\n<th>\nc\n</th>\n<th>\nd\n</th>\n</tr>\n<tr>\n<td>\ni64\n</td>\n<td>\nf64\n</td>\n<td>\ndatetime[μs]\n</td>\n<td>\nf64\n</td>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>\n0\n</td>\n<td>\n0.945679\n</td>\n<td>\n2022-12-01 00:00:00\n</td>\n<td>\n1.0\n</td>\n</tr>\n<tr>\n<td>\n1\n</td>\n<td>\n0.232926\n</td>\n<td>\n2022-12-02 00:00:00\n</td>\n<td>\n2.0\n</td>\n</tr>\n<tr>\n<td>\n2\n</td>\n<td>\n0.638681\n</td>\n<td>\n2022-12-03 00:00:00\n</td>\n<td>\nNaN\n</td>\n</tr>\n<tr>\n<td>\n3\n</td>\n<td>\n0.295667\n</td>\n<td>\n2022-12-04 00:00:00\n</td>\n<td>\nNaN\n</td>\n</tr>\n<tr>\n<td>\n4\n</td>\n<td>\n0.296556\n</td>\n<td>\n2022-12-05 00:00:00\n</td>\n<td>\n0.0\n</td>\n</tr>\n</tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n`tail`\n\n::: {.cell execution_count=20}\n``` {.python .cell-code}\ndf.tail()\n```\n\n::: {.cell-output .cell-output-display execution_count=19}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n\n    .dataframe td {\n        white-space: pre;\n    }\n\n    .dataframe td {\n        padding-top: 0;\n    }\n\n    .dataframe td {\n        padding-bottom: 0;\n    }\n\n    .dataframe td {\n        line-height: 95%;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n<small>shape: (5, 4)</small>\n<thead>\n<tr>\n<th>\na\n</th>\n<th>\nb\n</th>\n<th>\nc\n</th>\n<th>\nd\n</th>\n</tr>\n<tr>\n<td>\ni64\n</td>\n<td>\nf64\n</td>\n<td>\ndatetime[μs]\n</td>\n<td>\nf64\n</td>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>\n3\n</td>\n<td>\n0.295667\n</td>\n<td>\n2022-12-04 00:00:00\n</td>\n<td>\nNaN\n</td>\n</tr>\n<tr>\n<td>\n4\n</td>\n<td>\n0.296556\n</td>\n<td>\n2022-12-05 00:00:00\n</td>\n<td>\n0.0\n</td>\n</tr>\n<tr>\n<td>\n5\n</td>\n<td>\n0.142492\n</td>\n<td>\n2022-12-06 00:00:00\n</td>\n<td>\n-5.0\n</td>\n</tr>\n<tr>\n<td>\n6\n</td>\n<td>\n0.351933\n</td>\n<td>\n2022-12-07 00:00:00\n</td>\n<td>\n-42.0\n</td>\n</tr>\n<tr>\n<td>\n7\n</td>\n<td>\n0.486924\n</td>\n<td>\n2022-12-08 00:00:00\n</td>\n<td>\nnull\n</td>\n</tr>\n</tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n`sample`\n\n::: {.cell execution_count=21}\n``` {.python .cell-code}\ndf.sample(n=3)\n```\n\n::: {.cell-output .cell-output-display execution_count=20}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n\n    .dataframe td {\n        white-space: pre;\n    }\n\n    .dataframe td {\n        padding-top: 0;\n    }\n\n    .dataframe td {\n        padding-bottom: 0;\n    }\n\n    .dataframe td {\n        line-height: 95%;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n<small>shape: (3, 4)</small>\n<thead>\n<tr>\n<th>\na\n</th>\n<th>\nb\n</th>\n<th>\nc\n</th>\n<th>\nd\n</th>\n</tr>\n<tr>\n<td>\ni64\n</td>\n<td>\nf64\n</td>\n<td>\ndatetime[μs]\n</td>\n<td>\nf64\n</td>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>\n4\n</td>\n<td>\n0.296556\n</td>\n<td>\n2022-12-05 00:00:00\n</td>\n<td>\n0.0\n</td>\n</tr>\n<tr>\n<td>\n6\n</td>\n<td>\n0.351933\n</td>\n<td>\n2022-12-07 00:00:00\n</td>\n<td>\n-42.0\n</td>\n</tr>\n<tr>\n<td>\n3\n</td>\n<td>\n0.295667\n</td>\n<td>\n2022-12-04 00:00:00\n</td>\n<td>\nNaN\n</td>\n</tr>\n</tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n`describe`\n\n::: {.cell execution_count=22}\n``` {.python .cell-code}\ndf.describe()\n```\n\n::: {.cell-output .cell-output-display execution_count=21}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n\n    .dataframe td {\n        white-space: pre;\n    }\n\n    .dataframe td {\n        padding-top: 0;\n    }\n\n    .dataframe td {\n        padding-bottom: 0;\n    }\n\n    .dataframe td {\n        line-height: 95%;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n<small>shape: (7, 5)</small>\n<thead>\n<tr>\n<th>\ndescribe\n</th>\n<th>\na\n</th>\n<th>\nb\n</th>\n<th>\nc\n</th>\n<th>\nd\n</th>\n</tr>\n<tr>\n<td>\nstr\n</td>\n<td>\nf64\n</td>\n<td>\nf64\n</td>\n<td>\nstr\n</td>\n<td>\nf64\n</td>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>\n&quot;count&quot;\n</td>\n<td>\n8.0\n</td>\n<td>\n8.0\n</td>\n<td>\n&quot;8&quot;\n</td>\n<td>\n8.0\n</td>\n</tr>\n<tr>\n<td>\n&quot;null_count&quot;\n</td>\n<td>\n0.0\n</td>\n<td>\n0.0\n</td>\n<td>\n&quot;0&quot;\n</td>\n<td>\n1.0\n</td>\n</tr>\n<tr>\n<td>\n&quot;mean&quot;\n</td>\n<td>\n3.5\n</td>\n<td>\n0.423857\n</td>\n<td>\nnull\n</td>\n<td>\nNaN\n</td>\n</tr>\n<tr>\n<td>\n&quot;std&quot;\n</td>\n<td>\n2.44949\n</td>\n<td>\n0.260729\n</td>\n<td>\nnull\n</td>\n<td>\nNaN\n</td>\n</tr>\n<tr>\n<td>\n&quot;min&quot;\n</td>\n<td>\n0.0\n</td>\n<td>\n0.142492\n</td>\n<td>\n&quot;2022-12-01 00:...\n</td>\n<td>\n-42.0\n</td>\n</tr>\n<tr>\n<td>\n&quot;max&quot;\n</td>\n<td>\n7.0\n</td>\n<td>\n0.945679\n</td>\n<td>\n&quot;2022-12-08 00:...\n</td>\n<td>\n2.0\n</td>\n</tr>\n<tr>\n<td>\n&quot;median&quot;\n</td>\n<td>\n3.5\n</td>\n<td>\n0.324244\n</td>\n<td>\nnull\n</td>\n<td>\n1.0\n</td>\n</tr>\n</tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n### Expressions\n\n#### Select statement\n\nselect all columns\n\n::: {.cell execution_count=23}\n``` {.python .cell-code}\ndf.select(\n    pl.col(\"*\")\n)\n```\n\n::: {.cell-output .cell-output-display execution_count=22}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n\n    .dataframe td {\n        white-space: pre;\n    }\n\n    .dataframe td {\n        padding-top: 0;\n    }\n\n    .dataframe td {\n        padding-bottom: 0;\n    }\n\n    .dataframe td {\n        line-height: 95%;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n<small>shape: (8, 4)</small>\n<thead>\n<tr>\n<th>\na\n</th>\n<th>\nb\n</th>\n<th>\nc\n</th>\n<th>\nd\n</th>\n</tr>\n<tr>\n<td>\ni64\n</td>\n<td>\nf64\n</td>\n<td>\ndatetime[μs]\n</td>\n<td>\nf64\n</td>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>\n0\n</td>\n<td>\n0.945679\n</td>\n<td>\n2022-12-01 00:00:00\n</td>\n<td>\n1.0\n</td>\n</tr>\n<tr>\n<td>\n1\n</td>\n<td>\n0.232926\n</td>\n<td>\n2022-12-02 00:00:00\n</td>\n<td>\n2.0\n</td>\n</tr>\n<tr>\n<td>\n2\n</td>\n<td>\n0.638681\n</td>\n<td>\n2022-12-03 00:00:00\n</td>\n<td>\nNaN\n</td>\n</tr>\n<tr>\n<td>\n3\n</td>\n<td>\n0.295667\n</td>\n<td>\n2022-12-04 00:00:00\n</td>\n<td>\nNaN\n</td>\n</tr>\n<tr>\n<td>\n4\n</td>\n<td>\n0.296556\n</td>\n<td>\n2022-12-05 00:00:00\n</td>\n<td>\n0.0\n</td>\n</tr>\n<tr>\n<td>\n5\n</td>\n<td>\n0.142492\n</td>\n<td>\n2022-12-06 00:00:00\n</td>\n<td>\n-5.0\n</td>\n</tr>\n<tr>\n<td>\n6\n</td>\n<td>\n0.351933\n</td>\n<td>\n2022-12-07 00:00:00\n</td>\n<td>\n-42.0\n</td>\n</tr>\n<tr>\n<td>\n7\n</td>\n<td>\n0.486924\n</td>\n<td>\n2022-12-08 00:00:00\n</td>\n<td>\nnull\n</td>\n</tr>\n</tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n::: {.cell execution_count=24}\n``` {.python .cell-code}\nprint(pl.col(\"*\"))\nprint(type(pl.col(\"*\")))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n*\n<class 'polars.internals.expr.expr.Expr'>\n```\n:::\n:::\n\n\nselect specific columns\n\n::: {.cell execution_count=25}\n``` {.python .cell-code}\ndf.select(\n    pl.col([\"a\", \"b\"])\n)\n```\n\n::: {.cell-output .cell-output-display execution_count=24}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n\n    .dataframe td {\n        white-space: pre;\n    }\n\n    .dataframe td {\n        padding-top: 0;\n    }\n\n    .dataframe td {\n        padding-bottom: 0;\n    }\n\n    .dataframe td {\n        line-height: 95%;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n<small>shape: (8, 2)</small>\n<thead>\n<tr>\n<th>\na\n</th>\n<th>\nb\n</th>\n</tr>\n<tr>\n<td>\ni64\n</td>\n<td>\nf64\n</td>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>\n0\n</td>\n<td>\n0.945679\n</td>\n</tr>\n<tr>\n<td>\n1\n</td>\n<td>\n0.232926\n</td>\n</tr>\n<tr>\n<td>\n2\n</td>\n<td>\n0.638681\n</td>\n</tr>\n<tr>\n<td>\n3\n</td>\n<td>\n0.295667\n</td>\n</tr>\n<tr>\n<td>\n4\n</td>\n<td>\n0.296556\n</td>\n</tr>\n<tr>\n<td>\n5\n</td>\n<td>\n0.142492\n</td>\n</tr>\n<tr>\n<td>\n6\n</td>\n<td>\n0.351933\n</td>\n</tr>\n<tr>\n<td>\n7\n</td>\n<td>\n0.486924\n</td>\n</tr>\n</tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n::: {.cell execution_count=26}\n``` {.python .cell-code}\ndf.select([\n    pl.col(\"a\"),\n    pl.col(\"b\")\n])\n```\n\n::: {.cell-output .cell-output-display execution_count=25}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n\n    .dataframe td {\n        white-space: pre;\n    }\n\n    .dataframe td {\n        padding-top: 0;\n    }\n\n    .dataframe td {\n        padding-bottom: 0;\n    }\n\n    .dataframe td {\n        line-height: 95%;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n<small>shape: (8, 2)</small>\n<thead>\n<tr>\n<th>\na\n</th>\n<th>\nb\n</th>\n</tr>\n<tr>\n<td>\ni64\n</td>\n<td>\nf64\n</td>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>\n0\n</td>\n<td>\n0.945679\n</td>\n</tr>\n<tr>\n<td>\n1\n</td>\n<td>\n0.232926\n</td>\n</tr>\n<tr>\n<td>\n2\n</td>\n<td>\n0.638681\n</td>\n</tr>\n<tr>\n<td>\n3\n</td>\n<td>\n0.295667\n</td>\n</tr>\n<tr>\n<td>\n4\n</td>\n<td>\n0.296556\n</td>\n</tr>\n<tr>\n<td>\n5\n</td>\n<td>\n0.142492\n</td>\n</tr>\n<tr>\n<td>\n6\n</td>\n<td>\n0.351933\n</td>\n</tr>\n<tr>\n<td>\n7\n</td>\n<td>\n0.486924\n</td>\n</tr>\n</tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\nWhat if column names are duplicated?\n\nIt raises exception.\n\n::: {.cell execution_count=27}\n``` {.python .cell-code}\ntry:\n    df.select(\n        pl.col([\"a\", \"a\"])\n    )\nexcept Exception as e:\n    print(e)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nColumn with name: 'a' has more than one occurrences\n```\n:::\n:::\n\n\nexclude columns\n\n::: {.cell execution_count=28}\n``` {.python .cell-code}\ndf.select([\n    pl.exclude(\"a\")\n])\n```\n\n::: {.cell-output .cell-output-display execution_count=27}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n\n    .dataframe td {\n        white-space: pre;\n    }\n\n    .dataframe td {\n        padding-top: 0;\n    }\n\n    .dataframe td {\n        padding-bottom: 0;\n    }\n\n    .dataframe td {\n        line-height: 95%;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n<small>shape: (8, 3)</small>\n<thead>\n<tr>\n<th>\nb\n</th>\n<th>\nc\n</th>\n<th>\nd\n</th>\n</tr>\n<tr>\n<td>\nf64\n</td>\n<td>\ndatetime[μs]\n</td>\n<td>\nf64\n</td>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>\n0.945679\n</td>\n<td>\n2022-12-01 00:00:00\n</td>\n<td>\n1.0\n</td>\n</tr>\n<tr>\n<td>\n0.232926\n</td>\n<td>\n2022-12-02 00:00:00\n</td>\n<td>\n2.0\n</td>\n</tr>\n<tr>\n<td>\n0.638681\n</td>\n<td>\n2022-12-03 00:00:00\n</td>\n<td>\nNaN\n</td>\n</tr>\n<tr>\n<td>\n0.295667\n</td>\n<td>\n2022-12-04 00:00:00\n</td>\n<td>\nNaN\n</td>\n</tr>\n<tr>\n<td>\n0.296556\n</td>\n<td>\n2022-12-05 00:00:00\n</td>\n<td>\n0.0\n</td>\n</tr>\n<tr>\n<td>\n0.142492\n</td>\n<td>\n2022-12-06 00:00:00\n</td>\n<td>\n-5.0\n</td>\n</tr>\n<tr>\n<td>\n0.351933\n</td>\n<td>\n2022-12-07 00:00:00\n</td>\n<td>\n-42.0\n</td>\n</tr>\n<tr>\n<td>\n0.486924\n</td>\n<td>\n2022-12-08 00:00:00\n</td>\n<td>\nnull\n</td>\n</tr>\n</tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n#### Filter\n\n::: {.cell execution_count=29}\n``` {.python .cell-code}\ndf.filter(\n    pl.col(\"c\")\n    .is_between(\n        datetime(2022, 12, 2), datetime(2022, 12, 8),\n        closed = \"none\",\n    ),\n)\n```\n\n::: {.cell-output .cell-output-display execution_count=28}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n\n    .dataframe td {\n        white-space: pre;\n    }\n\n    .dataframe td {\n        padding-top: 0;\n    }\n\n    .dataframe td {\n        padding-bottom: 0;\n    }\n\n    .dataframe td {\n        line-height: 95%;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n<small>shape: (5, 4)</small>\n<thead>\n<tr>\n<th>\na\n</th>\n<th>\nb\n</th>\n<th>\nc\n</th>\n<th>\nd\n</th>\n</tr>\n<tr>\n<td>\ni64\n</td>\n<td>\nf64\n</td>\n<td>\ndatetime[μs]\n</td>\n<td>\nf64\n</td>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>\n2\n</td>\n<td>\n0.638681\n</td>\n<td>\n2022-12-03 00:00:00\n</td>\n<td>\nNaN\n</td>\n</tr>\n<tr>\n<td>\n3\n</td>\n<td>\n0.295667\n</td>\n<td>\n2022-12-04 00:00:00\n</td>\n<td>\nNaN\n</td>\n</tr>\n<tr>\n<td>\n4\n</td>\n<td>\n0.296556\n</td>\n<td>\n2022-12-05 00:00:00\n</td>\n<td>\n0.0\n</td>\n</tr>\n<tr>\n<td>\n5\n</td>\n<td>\n0.142492\n</td>\n<td>\n2022-12-06 00:00:00\n</td>\n<td>\n-5.0\n</td>\n</tr>\n<tr>\n<td>\n6\n</td>\n<td>\n0.351933\n</td>\n<td>\n2022-12-07 00:00:00\n</td>\n<td>\n-42.0\n</td>\n</tr>\n</tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n::: {.cell execution_count=30}\n``` {.python .cell-code}\ndf.filter(\n    (pl.col(\"a\") <= 3) &\n    (pl.col(\"d\").is_not_nan())\n)\n```\n\n::: {.cell-output .cell-output-display execution_count=29}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n\n    .dataframe td {\n        white-space: pre;\n    }\n\n    .dataframe td {\n        padding-top: 0;\n    }\n\n    .dataframe td {\n        padding-bottom: 0;\n    }\n\n    .dataframe td {\n        line-height: 95%;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n<small>shape: (2, 4)</small>\n<thead>\n<tr>\n<th>\na\n</th>\n<th>\nb\n</th>\n<th>\nc\n</th>\n<th>\nd\n</th>\n</tr>\n<tr>\n<td>\ni64\n</td>\n<td>\nf64\n</td>\n<td>\ndatetime[μs]\n</td>\n<td>\nf64\n</td>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>\n0\n</td>\n<td>\n0.945679\n</td>\n<td>\n2022-12-01 00:00:00\n</td>\n<td>\n1.0\n</td>\n</tr>\n<tr>\n<td>\n1\n</td>\n<td>\n0.232926\n</td>\n<td>\n2022-12-02 00:00:00\n</td>\n<td>\n2.0\n</td>\n</tr>\n</tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n#### With_columns\n\n::: {.cell execution_count=31}\n``` {.python .cell-code}\ndf.with_columns([\n    pl.col(\"b\").sum().alias(\"e\"),\n    (pl.col(\"b\") + 42).alias(\"b+42\"),\n])\n```\n\n::: {.cell-output .cell-output-display execution_count=30}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n\n    .dataframe td {\n        white-space: pre;\n    }\n\n    .dataframe td {\n        padding-top: 0;\n    }\n\n    .dataframe td {\n        padding-bottom: 0;\n    }\n\n    .dataframe td {\n        line-height: 95%;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n<small>shape: (8, 6)</small>\n<thead>\n<tr>\n<th>\na\n</th>\n<th>\nb\n</th>\n<th>\nc\n</th>\n<th>\nd\n</th>\n<th>\ne\n</th>\n<th>\nb+42\n</th>\n</tr>\n<tr>\n<td>\ni64\n</td>\n<td>\nf64\n</td>\n<td>\ndatetime[μs]\n</td>\n<td>\nf64\n</td>\n<td>\nf64\n</td>\n<td>\nf64\n</td>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>\n0\n</td>\n<td>\n0.945679\n</td>\n<td>\n2022-12-01 00:00:00\n</td>\n<td>\n1.0\n</td>\n<td>\n3.390858\n</td>\n<td>\n42.945679\n</td>\n</tr>\n<tr>\n<td>\n1\n</td>\n<td>\n0.232926\n</td>\n<td>\n2022-12-02 00:00:00\n</td>\n<td>\n2.0\n</td>\n<td>\n3.390858\n</td>\n<td>\n42.232926\n</td>\n</tr>\n<tr>\n<td>\n2\n</td>\n<td>\n0.638681\n</td>\n<td>\n2022-12-03 00:00:00\n</td>\n<td>\nNaN\n</td>\n<td>\n3.390858\n</td>\n<td>\n42.638681\n</td>\n</tr>\n<tr>\n<td>\n3\n</td>\n<td>\n0.295667\n</td>\n<td>\n2022-12-04 00:00:00\n</td>\n<td>\nNaN\n</td>\n<td>\n3.390858\n</td>\n<td>\n42.295667\n</td>\n</tr>\n<tr>\n<td>\n4\n</td>\n<td>\n0.296556\n</td>\n<td>\n2022-12-05 00:00:00\n</td>\n<td>\n0.0\n</td>\n<td>\n3.390858\n</td>\n<td>\n42.296556\n</td>\n</tr>\n<tr>\n<td>\n5\n</td>\n<td>\n0.142492\n</td>\n<td>\n2022-12-06 00:00:00\n</td>\n<td>\n-5.0\n</td>\n<td>\n3.390858\n</td>\n<td>\n42.142492\n</td>\n</tr>\n<tr>\n<td>\n6\n</td>\n<td>\n0.351933\n</td>\n<td>\n2022-12-07 00:00:00\n</td>\n<td>\n-42.0\n</td>\n<td>\n3.390858\n</td>\n<td>\n42.351933\n</td>\n</tr>\n<tr>\n<td>\n7\n</td>\n<td>\n0.486924\n</td>\n<td>\n2022-12-08 00:00:00\n</td>\n<td>\nnull\n</td>\n<td>\n3.390858\n</td>\n<td>\n42.486924\n</td>\n</tr>\n</tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n#### Groupby\n\n::: {.cell execution_count=32}\n``` {.python .cell-code}\ndf2 = pl.DataFrame({\n    \"x\": np.arange(0, 8),\n    \"y\": [\"A\", \"A\", \"A\", \"B\", \"B\", \"C\", \"X\", \"X\"],\n})\ndf2\n```\n\n::: {.cell-output .cell-output-display execution_count=31}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n\n    .dataframe td {\n        white-space: pre;\n    }\n\n    .dataframe td {\n        padding-top: 0;\n    }\n\n    .dataframe td {\n        padding-bottom: 0;\n    }\n\n    .dataframe td {\n        line-height: 95%;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n<small>shape: (8, 2)</small>\n<thead>\n<tr>\n<th>\nx\n</th>\n<th>\ny\n</th>\n</tr>\n<tr>\n<td>\ni64\n</td>\n<td>\nstr\n</td>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>\n0\n</td>\n<td>\n&quot;A&quot;\n</td>\n</tr>\n<tr>\n<td>\n1\n</td>\n<td>\n&quot;A&quot;\n</td>\n</tr>\n<tr>\n<td>\n2\n</td>\n<td>\n&quot;A&quot;\n</td>\n</tr>\n<tr>\n<td>\n3\n</td>\n<td>\n&quot;B&quot;\n</td>\n</tr>\n<tr>\n<td>\n4\n</td>\n<td>\n&quot;B&quot;\n</td>\n</tr>\n<tr>\n<td>\n5\n</td>\n<td>\n&quot;C&quot;\n</td>\n</tr>\n<tr>\n<td>\n6\n</td>\n<td>\n&quot;X&quot;\n</td>\n</tr>\n<tr>\n<td>\n7\n</td>\n<td>\n&quot;X&quot;\n</td>\n</tr>\n</tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n::: {.cell execution_count=33}\n``` {.python .cell-code}\ndf2.groupby(\n    \"y\", maintain_order=True\n).count()\n```\n\n::: {.cell-output .cell-output-display execution_count=32}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n\n    .dataframe td {\n        white-space: pre;\n    }\n\n    .dataframe td {\n        padding-top: 0;\n    }\n\n    .dataframe td {\n        padding-bottom: 0;\n    }\n\n    .dataframe td {\n        line-height: 95%;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n<small>shape: (4, 2)</small>\n<thead>\n<tr>\n<th>\ny\n</th>\n<th>\ncount\n</th>\n</tr>\n<tr>\n<td>\nstr\n</td>\n<td>\nu32\n</td>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>\n&quot;A&quot;\n</td>\n<td>\n3\n</td>\n</tr>\n<tr>\n<td>\n&quot;B&quot;\n</td>\n<td>\n2\n</td>\n</tr>\n<tr>\n<td>\n&quot;C&quot;\n</td>\n<td>\n1\n</td>\n</tr>\n<tr>\n<td>\n&quot;X&quot;\n</td>\n<td>\n2\n</td>\n</tr>\n</tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\nWhat if `maintain_order=False`\n\n::: {.cell execution_count=34}\n``` {.python .cell-code}\ndf2.groupby(\n    \"y\", maintain_order=False\n).count()\n```\n\n::: {.cell-output .cell-output-display execution_count=33}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n\n    .dataframe td {\n        white-space: pre;\n    }\n\n    .dataframe td {\n        padding-top: 0;\n    }\n\n    .dataframe td {\n        padding-bottom: 0;\n    }\n\n    .dataframe td {\n        line-height: 95%;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n<small>shape: (4, 2)</small>\n<thead>\n<tr>\n<th>\ny\n</th>\n<th>\ncount\n</th>\n</tr>\n<tr>\n<td>\nstr\n</td>\n<td>\nu32\n</td>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>\n&quot;A&quot;\n</td>\n<td>\n3\n</td>\n</tr>\n<tr>\n<td>\n&quot;C&quot;\n</td>\n<td>\n1\n</td>\n</tr>\n<tr>\n<td>\n&quot;X&quot;\n</td>\n<td>\n2\n</td>\n</tr>\n<tr>\n<td>\n&quot;B&quot;\n</td>\n<td>\n2\n</td>\n</tr>\n</tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n::: {.cell execution_count=35}\n``` {.python .cell-code}\ndf2.groupby(\"y\", maintain_order=True).agg([\n    pl.col(\"*\").count().alias(\"count\"),\n    pl.col(\"*\").sum().alias(\"sum\"),\n])\n```\n\n::: {.cell-output .cell-output-display execution_count=34}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n\n    .dataframe td {\n        white-space: pre;\n    }\n\n    .dataframe td {\n        padding-top: 0;\n    }\n\n    .dataframe td {\n        padding-bottom: 0;\n    }\n\n    .dataframe td {\n        line-height: 95%;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n<small>shape: (4, 3)</small>\n<thead>\n<tr>\n<th>\ny\n</th>\n<th>\ncount\n</th>\n<th>\nsum\n</th>\n</tr>\n<tr>\n<td>\nstr\n</td>\n<td>\nu32\n</td>\n<td>\ni64\n</td>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>\n&quot;A&quot;\n</td>\n<td>\n3\n</td>\n<td>\n3\n</td>\n</tr>\n<tr>\n<td>\n&quot;B&quot;\n</td>\n<td>\n2\n</td>\n<td>\n7\n</td>\n</tr>\n<tr>\n<td>\n&quot;C&quot;\n</td>\n<td>\n1\n</td>\n<td>\n5\n</td>\n</tr>\n<tr>\n<td>\n&quot;X&quot;\n</td>\n<td>\n2\n</td>\n<td>\n13\n</td>\n</tr>\n</tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n#### Combining operations\n\n::: {.cell execution_count=36}\n``` {.python .cell-code}\ndf_x = df.with_column(\n    (pl.col(\"a\") * pl.col(\"b\")).alias(\"a * b\")\n).select([\n    pl.all().exclude([\"c\", \"d\"])\n])\ndf_x\n```\n\n::: {.cell-output .cell-output-display execution_count=35}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n\n    .dataframe td {\n        white-space: pre;\n    }\n\n    .dataframe td {\n        padding-top: 0;\n    }\n\n    .dataframe td {\n        padding-bottom: 0;\n    }\n\n    .dataframe td {\n        line-height: 95%;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n<small>shape: (8, 3)</small>\n<thead>\n<tr>\n<th>\na\n</th>\n<th>\nb\n</th>\n<th>\na * b\n</th>\n</tr>\n<tr>\n<td>\ni64\n</td>\n<td>\nf64\n</td>\n<td>\nf64\n</td>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>\n0\n</td>\n<td>\n0.945679\n</td>\n<td>\n0.0\n</td>\n</tr>\n<tr>\n<td>\n1\n</td>\n<td>\n0.232926\n</td>\n<td>\n0.232926\n</td>\n</tr>\n<tr>\n<td>\n2\n</td>\n<td>\n0.638681\n</td>\n<td>\n1.277361\n</td>\n</tr>\n<tr>\n<td>\n3\n</td>\n<td>\n0.295667\n</td>\n<td>\n0.887001\n</td>\n</tr>\n<tr>\n<td>\n4\n</td>\n<td>\n0.296556\n</td>\n<td>\n1.186223\n</td>\n</tr>\n<tr>\n<td>\n5\n</td>\n<td>\n0.142492\n</td>\n<td>\n0.712461\n</td>\n</tr>\n<tr>\n<td>\n6\n</td>\n<td>\n0.351933\n</td>\n<td>\n2.111597\n</td>\n</tr>\n<tr>\n<td>\n7\n</td>\n<td>\n0.486924\n</td>\n<td>\n3.408468\n</td>\n</tr>\n</tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n### Combining dataframes\n\n#### Join\n\n::: {.cell execution_count=37}\n``` {.python .cell-code}\ndf = pl.DataFrame({\"a\": np.arange(0, 8), \n                   \"b\": np.random.rand(8), \n                   \"c\": [datetime(2022, 12, 1) + timedelta(days=idx) for idx in range(8)],\n                   \"d\": [1, 2.0, np.NaN, np.NaN, 0, -5, -42, None]\n                  })\n\ndf2 = pl.DataFrame({\n                    \"x\": np.arange(0, 8), \n                    \"y\": ['A', 'A', 'A', 'B', 'B', 'C', 'X', 'X'],\n})\n```\n:::\n\n\n::: {.cell execution_count=38}\n``` {.python .cell-code}\ndf.join(\n    df2, left_on=\"a\", right_on=\"x\",\n)\n```\n\n::: {.cell-output .cell-output-display execution_count=37}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n\n    .dataframe td {\n        white-space: pre;\n    }\n\n    .dataframe td {\n        padding-top: 0;\n    }\n\n    .dataframe td {\n        padding-bottom: 0;\n    }\n\n    .dataframe td {\n        line-height: 95%;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n<small>shape: (8, 5)</small>\n<thead>\n<tr>\n<th>\na\n</th>\n<th>\nb\n</th>\n<th>\nc\n</th>\n<th>\nd\n</th>\n<th>\ny\n</th>\n</tr>\n<tr>\n<td>\ni64\n</td>\n<td>\nf64\n</td>\n<td>\ndatetime[μs]\n</td>\n<td>\nf64\n</td>\n<td>\nstr\n</td>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>\n0\n</td>\n<td>\n0.76614\n</td>\n<td>\n2022-12-01 00:00:00\n</td>\n<td>\n1.0\n</td>\n<td>\n&quot;A&quot;\n</td>\n</tr>\n<tr>\n<td>\n1\n</td>\n<td>\n0.653994\n</td>\n<td>\n2022-12-02 00:00:00\n</td>\n<td>\n2.0\n</td>\n<td>\n&quot;A&quot;\n</td>\n</tr>\n<tr>\n<td>\n2\n</td>\n<td>\n0.207373\n</td>\n<td>\n2022-12-03 00:00:00\n</td>\n<td>\nNaN\n</td>\n<td>\n&quot;A&quot;\n</td>\n</tr>\n<tr>\n<td>\n3\n</td>\n<td>\n0.353114\n</td>\n<td>\n2022-12-04 00:00:00\n</td>\n<td>\nNaN\n</td>\n<td>\n&quot;B&quot;\n</td>\n</tr>\n<tr>\n<td>\n4\n</td>\n<td>\n0.698152\n</td>\n<td>\n2022-12-05 00:00:00\n</td>\n<td>\n0.0\n</td>\n<td>\n&quot;B&quot;\n</td>\n</tr>\n<tr>\n<td>\n5\n</td>\n<td>\n0.413338\n</td>\n<td>\n2022-12-06 00:00:00\n</td>\n<td>\n-5.0\n</td>\n<td>\n&quot;C&quot;\n</td>\n</tr>\n<tr>\n<td>\n6\n</td>\n<td>\n0.258704\n</td>\n<td>\n2022-12-07 00:00:00\n</td>\n<td>\n-42.0\n</td>\n<td>\n&quot;X&quot;\n</td>\n</tr>\n<tr>\n<td>\n7\n</td>\n<td>\n0.935968\n</td>\n<td>\n2022-12-08 00:00:00\n</td>\n<td>\nnull\n</td>\n<td>\n&quot;X&quot;\n</td>\n</tr>\n</tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n#### Concat\n\n::: {.cell execution_count=39}\n``` {.python .cell-code}\npl.concat([df, df2], how=\"horizontal\")\n```\n\n::: {.cell-output .cell-output-display execution_count=38}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n\n    .dataframe td {\n        white-space: pre;\n    }\n\n    .dataframe td {\n        padding-top: 0;\n    }\n\n    .dataframe td {\n        padding-bottom: 0;\n    }\n\n    .dataframe td {\n        line-height: 95%;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n<small>shape: (8, 6)</small>\n<thead>\n<tr>\n<th>\na\n</th>\n<th>\nb\n</th>\n<th>\nc\n</th>\n<th>\nd\n</th>\n<th>\nx\n</th>\n<th>\ny\n</th>\n</tr>\n<tr>\n<td>\ni64\n</td>\n<td>\nf64\n</td>\n<td>\ndatetime[μs]\n</td>\n<td>\nf64\n</td>\n<td>\ni64\n</td>\n<td>\nstr\n</td>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>\n0\n</td>\n<td>\n0.76614\n</td>\n<td>\n2022-12-01 00:00:00\n</td>\n<td>\n1.0\n</td>\n<td>\n0\n</td>\n<td>\n&quot;A&quot;\n</td>\n</tr>\n<tr>\n<td>\n1\n</td>\n<td>\n0.653994\n</td>\n<td>\n2022-12-02 00:00:00\n</td>\n<td>\n2.0\n</td>\n<td>\n1\n</td>\n<td>\n&quot;A&quot;\n</td>\n</tr>\n<tr>\n<td>\n2\n</td>\n<td>\n0.207373\n</td>\n<td>\n2022-12-03 00:00:00\n</td>\n<td>\nNaN\n</td>\n<td>\n2\n</td>\n<td>\n&quot;A&quot;\n</td>\n</tr>\n<tr>\n<td>\n3\n</td>\n<td>\n0.353114\n</td>\n<td>\n2022-12-04 00:00:00\n</td>\n<td>\nNaN\n</td>\n<td>\n3\n</td>\n<td>\n&quot;B&quot;\n</td>\n</tr>\n<tr>\n<td>\n4\n</td>\n<td>\n0.698152\n</td>\n<td>\n2022-12-05 00:00:00\n</td>\n<td>\n0.0\n</td>\n<td>\n4\n</td>\n<td>\n&quot;B&quot;\n</td>\n</tr>\n<tr>\n<td>\n5\n</td>\n<td>\n0.413338\n</td>\n<td>\n2022-12-06 00:00:00\n</td>\n<td>\n-5.0\n</td>\n<td>\n5\n</td>\n<td>\n&quot;C&quot;\n</td>\n</tr>\n<tr>\n<td>\n6\n</td>\n<td>\n0.258704\n</td>\n<td>\n2022-12-07 00:00:00\n</td>\n<td>\n-42.0\n</td>\n<td>\n6\n</td>\n<td>\n&quot;X&quot;\n</td>\n</tr>\n<tr>\n<td>\n7\n</td>\n<td>\n0.935968\n</td>\n<td>\n2022-12-08 00:00:00\n</td>\n<td>\nnull\n</td>\n<td>\n7\n</td>\n<td>\n&quot;X&quot;\n</td>\n</tr>\n</tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n",
    "supporting": [
      "getting-startied_files/figure-html"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}